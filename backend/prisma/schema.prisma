generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === KULLANICI TABLOSU ===
model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  role          String
  firstName     String?
  lastName      String?
  phone         String?
  department    String?
  records       Record[]
  generalFaults GeneralFault[]
  actionLogs    ActionLog[]
  announcements Announcement[]  @relation("UserAnnouncements")
  createdAt     DateTime        @default(now())
}

// === MOTOR TABLOSU ===
model Motor {
  id          Int      @id @default(autoincrement())
  serial      String   @unique
  name        String
  description String?
  status      String?
  location    String?
  records     Record[]
  createdAt   DateTime @default(now())
}

// === ARIZA TİPİ ===
model FaultType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  records   Record[]
  createdAt DateTime @default(now())
}

// === MOTOR ARIZA GEÇMİŞİ ===
model Record {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  motor       Motor     @relation(fields: [motorId], references: [id])
  motorId     Int
  faultType   FaultType @relation(fields: [faultTypeId], references: [id])
  faultTypeId Int
  desc        String
  duration    Int?      // Arıza süresi (dakika)
  date        DateTime  @default(now())
  productionImpact Boolean?
  line        String?
  downtimeMinutes Int?
  status      String?
  closedAt    DateTime?
  createdAt   DateTime  @default(now())
}

// === HAT (LINE) TABLOSU ===
model Line {
  id     Int                @id @default(autoincrement())
  code   String             @unique // "A1", "A2", ... "A7", "A95"
  name   String?
  faults GeneralFaultLines[]
}

// === ARIZA DEFTERİ ===
model GeneralFault {
  id               Int                  @id @default(autoincrement())
  description      String
  location         String?              
  productionImpact Boolean              
  date             DateTime             @default(now())
  user             User                 @relation(fields: [userId], references: [id])
  userId           Int
  lines            GeneralFaultLines[]  // Çoklu hat ilişkisi
  files            File[]
  actionLogs       ActionLog[]
  createdAt        DateTime             @default(now())
  status           String               @default("open") // "open" | "closed"
  closedAt         DateTime?            // Kapanış zamanı
}

// === ARIZA-HAT PIVOTU ===
model GeneralFaultLines {
  id             Int          @id @default(autoincrement())
  generalFault   GeneralFault @relation(fields: [generalFaultId], references: [id], onDelete: Cascade)
  generalFaultId Int
  line           Line         @relation(fields: [lineId], references: [id])
  lineId         Int
  downtimeMin    Int?         
}

// === DOSYA/FOTOĞRAF ===
model File {
  id             Int           @id @default(autoincrement())
  url            String
  fileName       String
  generalFault   GeneralFault? @relation(fields: [generalFaultId], references: [id], onDelete: Cascade)
  generalFaultId Int?
  uploadedAt     DateTime      @default(now())
}

// === AKSİYON LOGU ===
model ActionLog {
  id             Int           @id @default(autoincrement())
  generalFault   GeneralFault? @relation(fields: [generalFaultId], references: [id], onDelete: Cascade)
  generalFaultId Int?
  user           User?         @relation(fields: [userId], references: [id])
  userId         Int?
  actionType     String
  description    String?
  createdAt      DateTime      @default(now())
}

// === DUYURU ===
model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  desc        String
  date        DateTime @default(now())
  createdBy   User?    @relation("UserAnnouncements", fields: [createdById], references: [id])
  createdById Int?
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// === KULLANICI TABLOSU ===
model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  role          String
  firstName     String?
  lastName      String?
  phone         String?
  department    String?
  records       Record[]
  generalFaults GeneralFault[]
  actionLogs    ActionLog[]
  announcements Announcement[]  @relation("UserAnnouncements")
  createdAt     DateTime        @default(now())
  stockUsages   StockUsage[]
}

// === MOTOR TABLOSU ===
model Motor {
  id             Int       @id @default(autoincrement())
  serial         String    @unique
  tag            String?
  name           String
  type           String?
  description    String?
  status         String?
  location       String?
  powerKW        Float?
  voltage        Float?
  current        Float?
  phase          Int?
  manufacturer   String?
  modelNo        String?
  year           Int?
  rpm            Int?
  protection     String?
  connectionType String?
  lastService    DateTime?
  nextService    DateTime?
  isActive       Boolean?  @default(true)
  qrCode         String?
  imageUrl       String?
  notes          String?
  createdAt      DateTime  @default(now())
  records        Record[]
  controlDevices ControlDevice[]
}

// === ARIZA TİPİ ===
model FaultType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  records   Record[]
  createdAt DateTime @default(now())
}

// === MOTOR ARIZA GEÇMİŞİ ===
model Record {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  motor       Motor     @relation(fields: [motorId], references: [id], onDelete: Cascade)
  motorId     Int
  faultType   FaultType @relation(fields: [faultTypeId], references: [id])
  faultTypeId Int
  desc        String
  duration    Int?
  date        DateTime  @default(now())
  productionImpact Boolean?
  line        String?
  downtimeMinutes Int?
  status      String?
  closedAt    DateTime?
  createdAt   DateTime  @default(now())
  stockUsages StockUsage[]
}

// === HAT (LINE) TABLOSU ===
model Line {
  id     Int                @id @default(autoincrement())
  code   String             @unique
  name   String?
  faults GeneralFaultLines[]
}

// === ARIZA DEFTERİ ===
model GeneralFault {
  id               Int                  @id @default(autoincrement())
  description      String
  location         String?              
  productionImpact Boolean              
  date             DateTime             @default(now())
  user             User                 @relation(fields: [userId], references: [id])
  userId           Int
  lines            GeneralFaultLines[]
  files            File[]
  actionLogs       ActionLog[]
  createdAt        DateTime             @default(now())
  status           String               @default("open")
  closedAt         DateTime?
  stockUsages      StockUsage[]
}

// === ARIZA-HAT PIVOTU ===
model GeneralFaultLines {
  id             Int          @id @default(autoincrement())
  generalFault   GeneralFault @relation(fields: [generalFaultId], references: [id], onDelete: Cascade)
  generalFaultId Int
  line           Line         @relation(fields: [lineId], references: [id], onDelete: Cascade)
  lineId         Int
  downtimeMin    Int?         
}

// === DOSYA/FOTOĞRAF ===
model File {
  id             Int           @id @default(autoincrement())
  url            String
  fileName       String
  generalFault   GeneralFault? @relation(fields: [generalFaultId], references: [id], onDelete: Cascade)
  generalFaultId Int?
  uploadedAt     DateTime      @default(now())
}

// === AKSİYON LOGU ===
model ActionLog {
  id             Int           @id @default(autoincrement())
  generalFault   GeneralFault? @relation(fields: [generalFaultId], references: [id], onDelete: Cascade)
  generalFaultId Int?
  user           User?         @relation(fields: [userId], references: [id])
  userId         Int?
  actionType     String
  description    String?
  createdAt      DateTime      @default(now())
}

// === DUYURU ===
model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  desc        String
  date        DateTime @default(now())
  createdBy   User?    @relation("UserAnnouncements", fields: [createdById], references: [id])
  createdById Int?
}

// === MOTOR KONTROL CİHAZI (SÜRÜCÜ, SOFT STARTER, VFD) ===
model ControlDevice {
  id              Int      @id @default(autoincrement())
  type            String
  serial          String   @unique
  brand           String
  model           String
  powerKW         Float
  voltage         Float
  status          String
  isSpare         Boolean  @default(false)
  activeMotorId   Int?     
  motor           Motor?   @relation(fields: [activeMotorId], references: [id])
  spareForMotors  String?
  location        String
  protection      String?
  commProtocol    String?
  controlType     String?
  firmware        String?
  rampUpTime      Int?
  rampDownTime    Int?
  bypassContact   Boolean?
  year            Int?
  lastService     DateTime?
  nextService     DateTime?
  notes           String?
  imageUrl        String?
  qrCode          String?
  createdAt       DateTime @default(now())
}

// === STOK ===
model Stock {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  quantity    Int
  unit        String?
  critical    Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  usages      StockUsage[]
}

// === STOK KULLANIMI ===
model StockUsage {
  id            Int           @id @default(autoincrement())
  stock         Stock         @relation(fields: [stockId], references: [id], onDelete: Cascade)
  stockId       Int
  amount        Int
  usedAt        DateTime      @default(now())
  generalFault  GeneralFault? @relation(fields: [generalFaultId], references: [id], onDelete: Cascade)
  generalFaultId Int?
  record        Record?       @relation(fields: [recordId], references: [id], onDelete: Cascade)
  recordId      Int?
  user          User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId        Int?
  note          String?
}
